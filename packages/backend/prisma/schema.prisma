generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uwoId     String @id
  email     String @unique
  password  String
  firstName String
  lastName  String
  role      Role
  InstructorCourse InstructorCourse[]
}

model Department {
  departmentUuid  String    @id @default(uuid())
  departmentName  String    @unique
  departmentCode String @unique
  courses Course[]
}

model Course {
  courseUuid    String      @id @default(uuid())
  courseCode    String      
  semester      Term        
  year          Int    
  courseName    String      @unique
  department Department     @relation(fields: [departmentUuid], references: [departmentUuid])
  departmentUuid String
  InstructorCourse InstructorCourse[]
  courseOutlines  CourseOutline[]
}

model InstructorCourse {
  user    User  @relation(fields: [uwoId], references: [uwoId])
  uwoId   String
  course  Course  @relation(fields: [courseUuid], references: [courseUuid])
  courseUuid  String 
  @@id([uwoId, courseUuid])
}

enum Term {
  FALL
  WINTER
  SUMMER
}

enum Role {
  ADMINISTRATOR
  INSTRUCTOR
  DEPARTMENT_CHAIR
  ASSOCIATE_CHAIR
  PROGRAM_DIRECTOR
}

model Comments{
  commentId       String    @id @default(uuid())
  commentTxt      String 
  outlineId       String
  
}

model CourseOutline {
  courseUuid    String  
  course        Course    @relation(fields: [courseUuid], references: [courseUuid])
  versionNum    Int       //this values are set manually
  editLogs       EditLog[]
  @@id([courseUuid, versionNum])
}

model EditLog {
  courseUuid    String  
  versionNum    Int        
  editNum       Int    //this values are set manually       
  timeLastEdited DateTime
  editor String 
  courseOutline  CourseOutline     @relation(fields: [courseUuid,versionNum], references: [courseUuid, versionNum])
  @@id([courseUuid, versionNum])
}

