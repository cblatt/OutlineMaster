generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uwoId     String @id
  email     String @unique
  password  String
  firstName String
  lastName  String
  role      Role
  InstructorCourse InstructorCourse[]
}

model Department {
  departmentUuid  String    @id @default(uuid())
  departmentName  String    @unique
  departmentCode String @unique
  courses Course[]
  courseOutlines  CourseOutline[]
}

model Course {
  courseUuid    String      @id @default(uuid())
  courseCode    String      
  courseName    String
  department Department     @relation(fields: [departmentUuid], references: [departmentUuid])
  departmentUuid String
  InstructorCourse InstructorCourse[]
  courseOutlines  CourseOutline[]
  @@unique([departmentUuid, courseName])
  @@unique([departmentUuid, courseCode])
}

model InstructorCourse {
  user    User  @relation(fields: [uwoId], references: [uwoId])
  uwoId   String
  course  Course  @relation(fields: [courseUuid], references: [courseUuid])
  courseUuid  String 
  @@id([uwoId, courseUuid])
}

enum Role {
  ADMINISTRATOR
  INSTRUCTOR
  DEPARTMENT_CHAIR
  ASSOCIATE_CHAIR
  PROGRAM_DIRECTOR
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

model Comments{
  commentId       String    @id @default(uuid())
  commentTxt      String 
  outlineId       String
  versionId       String
  
}

model CourseOutline {
  courseUuid    String    
  departmentUuid String
  department    Department    @relation(fields: [departmentUuid], references: [departmentUuid])
  course        Course    @relation(fields: [courseUuid], references: [courseUuid])
  versionNum    Int       //this values are set manually
  editLogs      EditLog[]
  isApproved    String  @default("PENDING")
  year          String?
  instructors   CourseOutlineInstructor[]
  courseTopics   CourseOutlineTopic[]
  courseEvaluations CourseOutlineEvaluation[]
  description   String?
  calendarCopy String?
  lectureHours Int?
  labHours Int?
  tutorialHours Int? 
  courseCredits Int?
  prerequisites String? 
  antirequisites String? 
  corequisites String?
  engineeringScience Int? 
  engineeringDesign Int? 
  requiredTextbook String? 
  requiredReferences String? 
  recommendedReferences String? 
  knowledgeBase String?
  problemAnalysis String?
  investigation   String?
  design        String?
  useOfEngineering  String?
  individualAndTeamWork   String?
  communicationSkills String?
  professionalism String?
  impactOnSocietyAndEnvironment String?
  ethicsAndEquity String?
  economicAndProjectManagement  String?
  lifeLongLearning  String?
  homeWorkAssignments String?
  quizzes String?
  laboratory String?
  midtermTest String?
  finalExamination String?
  lateSubmissionPolicy String?
  submissionLocker String?
  justification String?
  @@id([courseUuid, versionNum])
}

model CourseOutlineInstructor {
  id String     @default(uuid())
  courseUuid    String
  versionNum    Int   
  prefix String
  name String
  office String
  phone String
  email String
  hours String
  courseOutline  CourseOutline     @relation(fields: [courseUuid,versionNum], references: [courseUuid, versionNum], onUpdate: Cascade, onDelete: Cascade)
  @@id([courseUuid, versionNum, id])
}

model CourseOutlineEvaluation {
  id String     @default(uuid())
  courseUuid    String
  versionNum    Int   
  courseComponent String
  weight String
  courseOutline  CourseOutline     @relation(fields: [courseUuid,versionNum], references: [courseUuid, versionNum], onUpdate: Cascade, onDelete: Cascade)
  @@id([courseUuid, versionNum, id])
}

model CourseOutlineTopic {
  id String     @default(uuid())
  courseUuid    String
  versionNum    Int   
  topic String
  topicDetails String
  gaIndicators GaIndicators[]
  courseOutline  CourseOutline     @relation(fields: [courseUuid,versionNum], references: [courseUuid, versionNum], onUpdate: Cascade, onDelete: Cascade)
  @@id([courseUuid, versionNum, id])
}

enum GaIndicators {
  KB1
  KB2
  KB3
  KB4
  PA1
  PA2
  PA3
  I1 
  I2 
  I3 
  D1 
  D2 
  D3 
  D4 
  ET1
  ET2
  ET3
  ITW1
  ITW2
  ITW3
  CS1
  CS2
  CS3
  PR1
  PR2
  PR3
  IESE1
  IESE2
  IESE3
  EE1
  EE2
  EE3
  EE4
  EPM1 
  EPM2
  EPM3
  EPM4
  LL1
  LL2
}

model EditLog {
  courseUuid    String  
  versionNum    Int        
  editNum       Int           
  timeLastEdited String
  editor String 
  courseOutline  CourseOutline     @relation(fields: [courseUuid,versionNum], references: [courseUuid, versionNum])
  @@id([courseUuid, versionNum, editNum])
}

